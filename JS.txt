I. Promise, async/await programming 

1. The resulting promise object has internal properties:

- state — initially “pending”, then changes to either “fulfilled” or “rejected”,
- result — an arbitrary value of your choosing, initially undefined.
When the executor finishes the job, it should call one of the functions that it gets as arguments:

- resolve(value) — to indicate that the job finished successfully:
  + sets state to "fulfilled",
  + sets result to value.
- reject(error) — to indicate that an error occurred:
  + sets state to "rejected",
  + sets result to error.

Example: 
 let promise = new Promise(function(resolve, reject) {
    setTimeout(() => resolve("done"), 1000); 
 });
 
 2.  .then() has 2 arguments:
 - The first argument of .then is a function that:
  + runs when the Promise is resolved, and
  + receives the result.
 - The second argument of .then is a function that:
  + runs when the Promise is rejected, and
  + receives the error.
3. .catch()
  If we’re interested only in errors, then we can use null as the first argument: .then(null, errorHandlingFunction). 
  Or we can use .catch(errorHandlingFunction), which is exactly the same:
 
4. Calback functions are functions that are passed to another function and are fired after the other function finished. 
II. Objects

1. const object can be changed
  const user = {name: "A"}; 
  user.name = "B"; (*)
  - this piece of code is totally legal. Because line (*) goes inside the object user but does not reassigns object user. but this code 
  will have an error: 
  const user = {name: "A"}; 
  user = {name: "B"}; 
2. duplicate an object: 
  - to duplicate an object use 2 methods: 
    + use for loop to iterate over all the keys of this object 
      for (var key in user) {
        newObject[key] = user[key]; 
      }
    + use Object.assign(des, [src1, src2,...]); 
3. check if a variable is a number 
 -  if (!isNaN(a))
 - if (typeof(a) === 'number')

4. there are 2 ways to create a new object: 
  - using object literal: 
    const person = {name: "Hi", age: 18}; 
    
  - using function constructor: 
    function person(name, age) {
      this.name = name; 
      this.age = age; 
    }
5. this keyword: 
  It has different values depending on where it is used:
    - In a method, this refers to the owner object.
    - Alone, this refers to the global object.
    - In a function, this refers to the global object.
    - In a function, in strict mode, this is undefined.
    - In arrow function, this retains the value of enclosing context's this. 
    - IN anonymous function, the anonymous function is not explicitly called on behalf of any objects, so this defaults to the window object 

III. VALUES, TYPES, OPERATIONs AND FUNCTIONS

1. there 3 special values of type number: Infinity, -Infinity and NaN 
2. The closure is the feature - that being able to get access to a specific instance of local binding in a enclosing scope 
3. memory management: 
 - garbage collector 
 - The basic garbage collection algorithm is called “mark-and-sweep”.
 - if an object is unreachable, it will form with other unreachable objects something called "unreachable island" und this island
 will be deleted. 
 4. Computer memorize current context of programm in call stack 

IV. JS and Browser 
1. Protocol describes the communication of the network. HTTP is protocol for retrieving named resources i.E GET /index.html HTTP/1.1
2. To become part of the Web, all you need to do is connect a machine to the Internet and have it listen on port 80 with the HTTP protocol so that other computers can ask it for documents.
3.  For example, a div is an ELEMENT node which can contain child nodes. Those child nodes can be other ELEMENT nodes or they can be TEXT nodes or COMMENT nodes or other types of nodes. childNodes return list of child nodes. children() return list of ELEMENT child nodes. 
4. Session Id can be stored in cookies or url. With url apporach, users can be attacked if hackers can get HTTP_Referrer attribute. 
With cookies approach, session id are stored in cookies. 
5. During the initial response, the Web server Sever has no information about how
has no knowledge about how the client processes its cookie request, cookies are processed on the client side
i.e., whether it was accepted or rejected. How a cookie is processed only with the following request. When the cookie was accepted, 
the client includes it in the HTTP header of every request
6. local Storage vs cookies: 
  - Cookies expire and get cleared a lot, localStorage is forever (until explicitly cleared).
  - localStorage isn't sent along in HTTP Requests, you have to ask for it.
  - You can store way more data in localStorage than you can in cookies.
  - The API for localStorage is wicked simple and easy.
